{"title":["Bien développer un plugin pour WordPress"],"link":["http://z720.net/blog/archives/2006/03/28/bien-developper-un-plugin-pour-wordpress"],"pubDate":["Tue, 28 Mar 2006 19:07:37 +0000"],"dc:creator":["seb"],"guid":[{"_":"http://v05.z720.net/blog/archives/2006/03/28/bien-developper-un-plugin-pour-wordpress","$":{"isPermaLink":"false"}}],"description":[""],"content:encoded":["<p>WordPress est étonnant de simplicité lorsqu'il s'agit de développer de nouveaux plugins. Cependant, il convient de suivre un certains nombre de bonnes pratiques.</p>\r\n\r\n<h2>Quelques bonnes pratiques</h2>\r\n<ul>\r\n\t<li>Encapsuler ses functions dans une classe afin de complètement isoler le fonctionnement du plugin de WordPress. Cela évite les conflits de variables, de nom de fonction, etc.</li>\r\n\t<li>Penser à l'internationalisation du code en utilisant les fonctions <code>__()</code> et <code>_e()</code> et déclarer un domaine pour votre plugin.</li>\r\n\t<li>Penser à documenter l'utilisation du plugin : rédiger une page de mode d'emploi que l'on affichera ensuite par le menu plugins &gt; aide plugin X</li>\r\n\t<li>N'utilisez pas n'importe quel \"hook\", mais assurez-vous qu'il correspond bien à votre usage.</li>\r\n</ul>\r\n\r\n<!--more-->\r\n<h2>Un modèle de squelette de plugin</h2>\r\n<p>Dans le squelettes suivant, je vous propose un petit coup de pouce pour mettre en place vos plugins. Copiez ce code dans un nouveau fichier et créez votre plugin...</p>\r\n<p>Dans l'exemple proposé, le plugin va ajouté à la fin de chaque billet le nom du plugin. Cen'est pas très utile mais ça permet de faire un exemple.</p>\r\n<pre class=\"php\">\r\n<code>\r\n/* \r\nPlugin Name: Nom du Plugin\r\nPlugin URI: http://www.example.com/votre_plugin\r\nDescription: Ce que fait votre plugin en quelques mots.\r\nVersion: 1.0\r\nAuthor: Votre Nom\r\nAuthor URI:  http://www.example.com\r\n*/\r\n\r\n/*\r\nSquelete de plugin : Mode d'emploi\r\n\r\n1. Remplir le cartouche en début de fichier, ce sont les informations qui apparaissent dans la description du plugin dans WordPress\r\n2. Remplacer {{VotrePlugin}} par le nom de votre plugin composé de lettres (sans accents), chiffre, underscore (_)\r\n3. Ajouter vos fonctions dans la partie à éditer\r\n4. Gérer le contenu de la page d'aide de votre plugin (fonction AdminHelpPage)\r\n5. (facultatif) Gérer l'installation options de paramétrage, tables... (fonction install)\r\n\r\n*/\r\n\r\nclass {{VotrePlugin}} {\r\n  var $domain = '';\r\n  var $version = '1.0'; //Changer pour correspondre à la version courante\r\n  var $option_ns = '';\r\n  var $options = array();\r\n  \t\r\n// Raccourci interne pour ajouter des actions\r\n  function add_action($nom, $num = 0) {\r\n    $hook = $nom;\r\n    $fonction = $nom;\r\n    if(!$num) { $fonction .= $num; }\r\n    add_action($hook, array(&$this, 'action_'.$nom));\r\n  }\r\n\t\r\n  function {{VotrePlugin}}() {\r\n// Initialisation des variables\r\n     if ($this->domain == '') $this->domain = get_class($this);\r\n     if ($this->option_ns == '') $this->option_ns = get_class($this);\r\n// Récupération des options\r\n\t\t$this->options = get_option($this->option_ns);\r\n\r\n// Doit-on lancer l'installation ?\r\n    if(!isset($this->options['install']) or ($this->options['install'] != $this->version))\r\n    \t$this->install();\r\n\t\r\n//Charger les données de localisation\r\n    load_plugin_textdomain($this->domain); \r\n\t\r\n// gestion automatique des actions\r\n\t\tforeach(get_class_methods(get_class($this)) as $methode) {\r\n\t\t\tif(substr($methode, 0, 7) == 'action_') {\r\n\t\t\t\t$this->add_action(substr($methode, 7));\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n  }      \r\n\t\r\n  function action_admin_menu() {\r\n    if (function_exists('add_submenu_page')) {\r\n      add_submenu_page('plugins.php',\r\n                       __('{{VotrePlugin}}', $this->domain),\r\n                       __('{{VotrePlugin}}', $this->domain),\r\n                       3,\r\n                       basename(__FILE__),\r\n                       array(&$this, 'AdminHelpPage'));\r\n    }\r\n  }\r\n  \r\n  function set($option, $value) {\r\n  \t$this->options[$option] = $value;\r\n  }\r\n  \r\n  function get($option) {\r\n  \tif (isset($this->options[$option])) {\r\n  \t\treturn $this->options[$option];\r\n  \t} else {\r\n  \t\treturn false;\r\n  \t}\r\n  }\r\n  \r\n  function update_options() {\r\n  \treturn update_option($this->option_ns, $this->options);\r\n  }\r\n\t\r\n//---------------------------------------------\r\n// Editez à partir d'ici\r\n//---------------------------------------------\r\n\r\n  function install() {\r\n// Fonction permettant l'installation de votre plugin (création de tables, de paramètres...)\r\n\t\t$this->set('install', $this->version);\r\n\t\t$this->set('page', 0);\r\n\t\t$this->update_options();\r\n  }\r\n\t\r\n  function AdminHelpPage() {\r\n  \techo '<div class=\"wrap\">Page d'admin de votre plugin</div>';    \r\n  }\r\n  \t  \r\n  function action_wp_title($titre) {\r\n  \treturn $titre.' (on stéroïd)';    \r\n  }\r\n  \r\n\r\n  \r\n//---------------------------------------------\r\n// Fin de la partie d'édition\r\n//---------------------------------------------\r\n\t\r\n}\r\n\t\r\n$inst_{{VotrePlugin}} = new {{VotrePlugin}}();\r\n\r\n</code>\r\n</pre>\r\n\r\n<p>Dans la partie édition, il suffit de créer de nouvelles méthodes <code>action_</code>\"nom du hook\" pour que celles-ci soient automatiquement enregistrées et exécutées par WordPress. De plus il est facile de gérer les options de votre plugin parmi les options de WordPress en utilisant les méthodes <code>get</code>, <code>set</code> et <code>update_options</code></p>\r\n<p>N'hésitez pas à faire vos remarques dans les commentaires.</p>\r\n<p><a href=\"/FileSharing/WordPress/SquelettePlugin.txt\">Télécharger le squelette</a></p>\r\n<h2>Ressources connexes</h2>\r\n<p>Pour vous aider à créer vos propres plugins, n'hésitez pas à consulter :\r\n<ul>\r\n\t<li><a href=\"http://codex.wordpress.org/Writing_a_Plugin\">Ecrire un plugin (en anglais)</a></li>\r\n\t<li><a href=\"http://codex.wordpress.org/Plugin_API\">Plugin API (en anglais)</a></li>\r\n\t<li><a href=\"http://wphooks.flatearth.org/\">Hook Database : documentation des points de branchement des plugins (en anglais)</a></li>\r\n</ul></p>\r\n"],"excerpt:encoded":[""],"wp:post_id":["133"],"wp:post_date":["2006-03-28 21:07:37"],"wp:post_date_gmt":["2006-03-28 19:07:37"],"wp:comment_status":["closed"],"wp:ping_status":["closed"],"wp:post_name":["bien-developper-un-plugin-pour-wordpress"],"wp:status":["publish"],"wp:post_parent":["0"],"wp:menu_order":["0"],"wp:post_type":["post"],"wp:post_password":[""],"wp:is_sticky":["0"],"category":[{"_":"Développement","$":{"domain":"category","nicename":"developpement"}},{"_":"Web","$":{"domain":"category","nicename":"web"}},{"_":"WordPress","$":{"domain":"category","nicename":"wordpress"}}],"wp:comment":[{"wp:comment_id":["329"],"wp:comment_author":["Ozh"],"wp:comment_author_email":["ozh@planetozh.com"],"wp:comment_author_url":["http://planetozh.com"],"wp:comment_author_IP":["192.54.193.37"],"wp:comment_date":["2006-03-29 12:19:22"],"wp:comment_date_gmt":["2006-03-29 10:19:22"],"wp:comment_content":["Très bon."],"wp:comment_approved":["1"],"wp:comment_type":[""],"wp:comment_parent":["0"],"wp:comment_user_id":["0"]},{"wp:comment_id":["506"],"wp:comment_author":["z720.net &raquo; Archive &raquo; Séparer son site et son weblog propulsé par WordPress"],"wp:comment_author_email":["blog@z720.net"],"wp:comment_author_url":["http://v05.z720.net/blog/archives/2006/10/12/separer-son-site-et-son-weblog-propulse-par-wordpress"],"wp:comment_author_IP":["172.16.8.14"],"wp:comment_date":["2006-10-12 13:26:45"],"wp:comment_date_gmt":["2006-10-12 11:26:45"],"wp:comment_content":["[...] Pour éviter que nos fonctions entrent en collision avec celles de WordPress, celles-ci seront encapsulées dans une classe. De la même manière que je le préconise pour les plugins. [...]"],"wp:comment_approved":["1"],"wp:comment_type":["pingback"],"wp:comment_parent":["0"],"wp:comment_user_id":["0"]}]}